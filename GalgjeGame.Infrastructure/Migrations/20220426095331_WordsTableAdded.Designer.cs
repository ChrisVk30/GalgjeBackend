// <auto-generated />
using GalgjeGame.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace GalgjeGame.Migrations
{
    [DbContext(typeof(GalgjeContext))]
    [Migration("20220426095331_WordsTableAdded")]
    partial class WordsTableAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GalgjeGame.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"), 1L, 1);

                    b.Property<int>("IncorrectGuesses")
                        .HasColumnType("int");

                    b.Property<int>("TimeElapsedInGuessing")
                        .HasColumnType("int");

                    b.Property<int>("TimesPlayed")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WordsGuessed")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GalgjeGame.Words", b =>
                {
                    b.Property<string>("Word")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Word");

                    b.ToTable("Words");
                });
#pragma warning restore 612, 618
        }
    }
}
